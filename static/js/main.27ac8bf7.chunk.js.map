{"version":3,"sources":["decorators/Singleton.ts","utils/ObjectUtil.ts","services/CardService.ts","services/BoardService.ts","services/ListService.ts","components/Board.tsx","components/List.tsx","components/Card.tsx","components/AddList.tsx","App.tsx","index.js"],"names":["SINGLETON_KEY","Symbol","Singleton","classTarget","Proxy","construct","target","argumentsList","newTarget","prototype","Reflect","ObjectUtil","obj","JSON","parse","stringify","CardService","fn","stateFunction","this","listID","state","newState","deepCopy","card","id","uuid","list_id","value","completed","push","cardObj","index","findIndex","filter","BoardService","name","bg_color","ListService","listObj","list","BoardWrapper","styled","div","Header","HeaderInput","input","ListsContainer","Board","data","boardService","children","useState","toggle","setToggle","inputRef","useRef","handleCompletion","current","trim","changeName","style","background","type","ref","defaultValue","onBlur","onKeyDown","event","key","onDoubleClick","onChange","changeColor","ListStyle","CardWrapper","h4","Button","button","ContentWrapper","List","cardService","listService","updateList","onClick","deleteList","deleteCardByList","droppableId","provided","droppableProps","innerRef","placeholder","addCard","TextArea","textarea","Card","textAreaRef","useEffect","changeTextAreaHeight","height","scrollHeight","deleteCard","updateCard","handleKeyDown","draggableId","draggableProps","dragHandleProps","autoFocus","AddList","addList","App","boardState","setBoardState","listsState","setListsState","cardsState","setCardsState","board","localStorage","getItem","lists","cards","window","location","reload","setItem","className","onDragEnd","result","source","destination","find","item","splice","map","flatMap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27ac8bf7.chunk.js","sourcesContent":["const SINGLETON_KEY = Symbol()\r\n\r\ntype singleton<T extends new (...args: any[]) => any> = T & {\r\n    [SINGLETON_KEY]: T extends new (...args: any[]) => infer I ? I : never\r\n}\r\nconst Singleton = <T extends new (...args: any[]) => any>(classTarget: T) =>\r\n    new Proxy(classTarget, {\r\n        construct(target: singleton<T>, argumentsList, newTarget) {\r\n            // Skip proxy for children\r\n            if (target.prototype !== newTarget.prototype) {\r\n                return Reflect.construct(target, argumentsList, newTarget)\r\n            }\r\n            if (!target[SINGLETON_KEY]) {\r\n                target[SINGLETON_KEY] = Reflect.construct(target, argumentsList, newTarget)\r\n            }\r\n            return target[SINGLETON_KEY]\r\n        },\r\n    })\r\n\r\nexport default Singleton;","class ObjectUtil {\r\n    public static deepCopy(obj: Object) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n}\r\n\r\nexport default ObjectUtil;","import Singleton from \"../decorators/Singleton\";\r\nimport ICard from \"../interfaces/ICard\";\r\nimport ObjectUtil from \"../utils/ObjectUtil\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\n@Singleton\r\nclass CardService {\r\n    private readonly stateFunction: Function;\r\n\r\n    public constructor(fn: Function) {\r\n        this.stateFunction = fn;\r\n    }\r\n\r\n    public addCard(listID: string) {\r\n        this.stateFunction((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n\r\n            const card: ICard = {\r\n                id: uuid(),\r\n                list_id: listID,\r\n                value: \"\",\r\n                completed: false\r\n            };\r\n\r\n            newState.push(card);\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    public updateCard(cardObj: ICard) {\r\n        this.stateFunction((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n\r\n            const index = newState.findIndex((card: ICard) => card.id === cardObj.id);\r\n            newState[index] = cardObj;\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    public deleteCard(cardObj: ICard) {\r\n        this.stateFunction((state: any) => {\r\n           return ObjectUtil.deepCopy(state).filter((card: any) => {\r\n                return card.id !== cardObj.id;\r\n            });\r\n        });\r\n    }\r\n\r\n    public deleteCardByList(listID: string) {\r\n        this.stateFunction((state: any) => {\r\n            return ObjectUtil.deepCopy(state).filter((card: any) => {\r\n                return card.list_id !== listID;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default CardService;","import Singleton from \"../decorators/Singleton\";\r\nimport ObjectUtil from \"../utils/ObjectUtil\";\r\n\r\n@Singleton\r\nclass BoardService {\r\n    private readonly stateFunction:  Function;\r\n\r\n    public constructor(fn: Function) {\r\n        this.stateFunction = fn;\r\n    }\r\n\r\n    public changeName(name: string) {\r\n        this.stateFunction((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n            newState.name = name;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    public changeColor(value: string) {\r\n        this.stateFunction((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n            newState.bg_color = value;\r\n            return newState;\r\n        })\r\n    }\r\n}\r\n\r\nexport default BoardService;","import Singleton from \"../decorators/Singleton\";\r\nimport IList from \"../interfaces/IList\";\r\nimport ObjectUtil from \"../utils/ObjectUtil\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\n@Singleton\r\nclass ListService {\r\n    private readonly stateFunction: Function;\r\n\r\n    public constructor(fn: Function) {\r\n        this.stateFunction = fn;\r\n    }\r\n\r\n    public addList() {\r\n        this.stateFunction((state: any) => {\r\n            return [...ObjectUtil.deepCopy(state), {\r\n                id: uuid(),\r\n                name: \"List name\"\r\n                } as IList];\r\n        });\r\n    }\r\n\r\n    public updateList(listObj: IList) {\r\n        this.stateFunction((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n\r\n            const index = newState.findIndex((list: IList) => list.id === listObj.id);\r\n            newState[index] = listObj;\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    public deleteList(listObj: IList) {\r\n        this.stateFunction((state: any) => {\r\n            return ObjectUtil.deepCopy(state).filter((list: any) => {\r\n                return list.id !== listObj.id;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default ListService;","import styled from \"styled-components\";\r\nimport {ReactNode, useRef, useState} from \"react\";\r\nimport BoardService from \"../services/BoardService\";\r\nimport IBoard from \"../interfaces/IBoard\";\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  height: 100%;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: inline-flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  \r\n  & > * {\r\n    margin: 0;\r\n    padding: 15px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  & > h2 {\r\n    color: white;\r\n  }\r\n  \r\n  & > input[type=\"color\"] {\r\n    border-radius: 100%;\r\n    height: 30px;\r\n    width: 30px;\r\n    border: none;\r\n    padding: 2px;\r\n    margin: 15px;\r\n    \r\n    &::-webkit-color-swatch-wrapper {\r\n      padding: 0px;\r\n      border-radius: 100%;\r\n    }\r\n\r\n    &::-webkit-color-swatch {\r\n      padding: 0px;\r\n      border-radius: 100%;\r\n    }\r\n  }\r\n  \r\n`;\r\n\r\n\r\n\r\nconst HeaderInput = styled.input`\r\n  margin: 0;\r\n  padding: 15px;\r\n  color: white;\r\n  border: none;\r\n  background: transparent;\r\n  font-weight: bold;\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst ListsContainer = styled.div`\r\n  flex: 1;\r\n  display: inline-flex;\r\n  padding: 0 15px 15px;\r\n  overflow-x: auto;\r\n`;\r\n\r\nconst Board = ({data, boardService, children}: { data: IBoard, boardService: BoardService, children: ReactNode }) => {\r\n    const [toggle, setToggle] = useState(false)\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleCompletion = () => {\r\n        if (inputRef.current!.value.trim() === \"\") return;\r\n        boardService.changeName(inputRef.current!.value);\r\n        setToggle(false)\r\n    }\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        if (event.key === 'Enter' || event.key === 'Escape') {\r\n            handleCompletion();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <BoardWrapper style={{background: data.bg_color}} >\r\n            <Header>\r\n                {(toggle) ? (<HeaderInput type=\"text\" ref={inputRef} defaultValue={data.name}\r\n                                          onBlur={handleCompletion}\r\n                                          onKeyDown={handleKeyDown}/>) :\r\n                    <h2 onDoubleClick={() => setToggle(true)}>{data.name}</h2>\r\n                }\r\n                <input type=\"color\" value={data.bg_color} onChange={(event) => boardService.changeColor(event.target.value)}/>\r\n            </Header>\r\n            <ListsContainer>\r\n                {children}\r\n            </ListsContainer>\r\n        </BoardWrapper>\r\n    )\r\n}\r\n\r\nexport default Board;","import styled from \"styled-components\";\r\nimport {ReactNode, useRef, useState} from \"react\";\r\nimport ListService from \"../services/ListService\";\r\nimport CardService from \"../services/CardService\";\r\nimport IList from \"../interfaces/IList\";\r\nimport {BiTrash} from \"react-icons/bi\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\n\r\nconst ListStyle = styled.div`\r\n  min-width: 280px;\r\n  max-width: 280px;\r\n  background: #ebecf0;\r\n  border-radius: 3px;\r\n\r\n  /* Enables Scroll on CardWrapper */\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  & ~ & {\r\n    margin-left: 15px;\r\n  }\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  /*   Top: 40 for header */\r\n  top: 40px;\r\n  /*   Bottom: 45 for button */\r\n  bottom: 45px;\r\n  overflow-y: auto;\r\n\r\n\r\n  /* width */\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  /* Track */\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n  }\r\n\r\n  /* Handle */\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #c4c4c4;\r\n  }\r\n`;\r\n\r\nconst Header = styled.h4`\r\n  padding: 10px;\r\n  margin: 0;\r\n  cursor: pointer;\r\n  \r\n  &:hover > * div:last-of-type {\r\n    color: black;\r\n    transition: all 500ms;\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst HeaderInput = styled.input`\r\n  margin: 0;\r\n  padding: 0;\r\n  font-weight: bold;\r\n  border: none;\r\n  background: transparent;\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`\r\n\r\nconst Button = styled.button`\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  border: none;\r\n  background: lightgray;\r\n  padding: 15px;\r\n  cursor: pointer;\r\n  border-radius: 0 0 3px 3px;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  & > *:last-of-type {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 5px 0 15px;\r\n    color: #ebecf0;\r\n    opacity: 0;\r\n  }\r\n\r\n`;\r\n\r\nconst List = ({\r\n                  data,\r\n                  children,\r\n                  cardService,\r\n                  listService\r\n              }: { data: IList, children: ReactNode, cardService: CardService, listService: ListService }) => {\r\n    const [toggle, setToggle] = useState(false)\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleCompletion = () => {\r\n        if (inputRef.current!.value.trim() === \"\") return;\r\n\r\n        data.name = inputRef.current!.value;\r\n        listService.updateList(data);\r\n\r\n        setToggle(false);\r\n    }\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        if (event.key === 'Enter' || event.key === 'Escape') {\r\n            handleCompletion();\r\n        }\r\n    }\r\n\r\n    const handleDeleteClick = () => {\r\n        listService.deleteList(data);\r\n        cardService.deleteCardByList(data.id);\r\n    }\r\n\r\n\r\n    return (\r\n        <ListStyle>\r\n            <Header onDoubleClick={() => setToggle(true)}>\r\n                {(toggle) ? (<HeaderInput type=\"text\" ref={inputRef} defaultValue={data.name}\r\n                                          onBlur={handleCompletion}\r\n                                          onKeyDown={handleKeyDown}/>) :\r\n                    <ContentWrapper>\r\n                        <div>{data.name}</div>\r\n                        <div onClick={handleDeleteClick}><BiTrash/></div>\r\n                    </ContentWrapper>}\r\n            </Header>\r\n            <Droppable droppableId={data.id}>\r\n                {provided => (\r\n                    <CardWrapper {...provided.droppableProps} ref={provided.innerRef}>\r\n                        {children}\r\n                        {provided.placeholder}\r\n                    </CardWrapper>\r\n                )}\r\n            </Droppable>\r\n            <Button onClick={() => cardService.addCard(data.id)}>Add Card +</Button>\r\n        </ListStyle>\r\n    )\r\n}\r\n\r\nexport default List;","import styled from \"styled-components\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {BiTrash} from \"react-icons/bi\";\r\nimport CardService from \"../services/CardService\";\r\nimport ICard from \"../interfaces/ICard\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst CardWrapper = styled.div`\r\n  background: white;\r\n  margin: 0 5px 5px;\r\n  padding: 10px;\r\n  border-radius: 3px;\r\n  overflow-wrap: break-word;\r\n\r\n  & ~ & {\r\n    margin-top: 5px;\r\n  }\r\n\r\n  &:hover > * div:last-of-type {\r\n    color: black;\r\n    transition: all 500ms;\r\n\r\n  }\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  border: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  min-height: 15px;\r\n  display: block;\r\n  overflow: hidden;\r\n  resize: none;\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  & > *:last-of-type {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 5px 0 15px;\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n\r\n`;\r\n\r\n\r\nconst Card = ({data, cardService, index}: { data: ICard, cardService: CardService, index: number }) => {\r\n    const [toggle, setToggle] = useState((data.value === \"\"))\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (!toggle) return;\r\n        changeTextAreaHeight();\r\n    }, [toggle]);\r\n\r\n    const changeTextAreaHeight = () => {\r\n        const target = textAreaRef.current!;\r\n\r\n        target.style.height = 'auto';\r\n        target.style.height = target?.scrollHeight + 'px';\r\n\r\n    }\r\n\r\n    const handleCompletion = () => {\r\n        if (textAreaRef.current!.value.trim() === \"\") return cardService.deleteCard(data);\r\n\r\n        setToggle(false);\r\n        data.value = textAreaRef.current!.value;\r\n        cardService.updateCard(data);\r\n    }\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        if (event.key === 'Enter' || event.key === 'Escape') {\r\n            handleCompletion();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={data.id} index={index}>\r\n            {provided => (\r\n                <CardWrapper\r\n                    onDoubleClick={() => setToggle(true)}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    {(toggle) ?\r\n                        (<TextArea autoFocus={true} ref={textAreaRef} defaultValue={data.value}\r\n                                   onChange={changeTextAreaHeight}\r\n                                   onKeyDown={handleKeyDown}\r\n                                   onBlur={handleCompletion}\r\n                            />\r\n                        ) : <ContentWrapper>\r\n                            <div>{data.value}</div>\r\n                            <div onClick={() => cardService.deleteCard(data)}><BiTrash/></div>\r\n                        </ContentWrapper>}\r\n                </CardWrapper>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card;","import styled from \"styled-components\";\r\nimport ListService from \"../services/ListService\";\r\n\r\nconst Button = styled.button`\r\n  width: 280px;\r\n  border: none;\r\n  background: #ebecf0;\r\n  border-radius: 3px;\r\n  flex: none;\r\n  align-self: flex-start;\r\n  padding: 15px;\r\n  cursor: pointer;\r\n  \r\n  * ~ & {\r\n    margin-left: 15px;\r\n  }\r\n`;\r\n\r\nfunction AddList({listService}: {listService: ListService}) {\r\n    return (\r\n           <Button onClick={() => listService.addList()}>Add List +</Button>\r\n    )\r\n}\r\n\r\nexport default AddList","import {useEffect, useState} from \"react\";\r\nimport './App.css';\r\n\r\n/* Services */\r\nimport CardService from \"./services/CardService\";\r\nimport BoardService from \"./services/BoardService\";\r\nimport ListService from \"./services/ListService\";\r\n\r\n/* Interfaces */\r\nimport IBoard from \"./interfaces/IBoard\"\r\nimport IList from \"./interfaces/IList\";\r\nimport ICard from \"./interfaces/ICard\";\r\n\r\n/* Components */\r\nimport Board from \"./components/Board\";\r\nimport List from \"./components/List\";\r\nimport Card from \"./components/Card\";\r\nimport AddList from \"./components/AddList\";\r\nimport {DragDropContext, DropResult} from \"react-beautiful-dnd\";\r\nimport ObjectUtil from \"./utils/ObjectUtil\";\r\n\r\n/* Service variables */\r\nlet boardService: BoardService;\r\nlet listService: ListService;\r\nlet cardService: CardService;\r\n\r\nfunction App() {\r\n    const [boardState, setBoardState] = useState<IBoard>({name: \"Board name\", bg_color: \"#282828\"});\r\n    const [listsState, setListsState] = useState<IList[]>([]);\r\n    const [cardsState, setCardsState] = useState<ICard[]>([]);\r\n\r\n    useEffect(() => {\r\n        boardService = new BoardService(setBoardState);\r\n        listService = new ListService(setListsState);\r\n        cardService = new CardService(setCardsState);\r\n    }, [boardState, cardsState, listsState]);\r\n\r\n\r\n    useEffect(() => {\r\n        const board = localStorage.getItem(\"boardState\");\r\n        const lists = localStorage.getItem(\"listsState\");\r\n        const cards = localStorage.getItem(\"cardsState\");\r\n        if (board) setBoardState(JSON.parse(board));\r\n        if (lists) setListsState(JSON.parse(lists));\r\n        if (cards) setCardsState(JSON.parse(cards));\r\n\r\n        // weird issue, can't use buttons when localStorage has no data. So fixed by reloading.\r\n        if (!board) window.location.reload();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"boardState\", JSON.stringify(boardState));\r\n        localStorage.setItem(\"listsState\", JSON.stringify(listsState));\r\n        localStorage.setItem(\"cardsState\", JSON.stringify(cardsState));\r\n    }, [boardState, listsState, cardsState]);\r\n\r\n    const onDragEnd = (result: DropResult) => {\r\n        const {draggableId, source, destination} = result;\r\n\r\n        if (!destination) return;\r\n        if (destination.index === source.index && destination.droppableId === source.droppableId) return;\r\n\r\n        setCardsState((state: any) => {\r\n            const newState = ObjectUtil.deepCopy(state);\r\n            let card = newState.find((item: ICard) => item.id === draggableId)!;\r\n\r\n            card.list_id = destination.droppableId;\r\n\r\n            newState.splice(source.index, 1);\r\n            newState.splice(destination.index, 0, card);\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Board data={boardState} boardService={boardService}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                {listsState!.map((list) => (\r\n                    // Generate List\r\n                    <List key={list.id} data={list} cardService={cardService} listService={listService}>\r\n\r\n                        {cardsState.flatMap((card: any, index) => card.list_id === list.id ? (\r\n                            // Generate Card\r\n                            <Card key={card.id} data={card}\r\n                                  cardService={cardService} index={index}/>\r\n                        ) : \"\")}\r\n\r\n                    </List>\r\n                ))}\r\n            </DragDropContext>\r\n                <AddList listService={listService}/>\r\n            </Board>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}